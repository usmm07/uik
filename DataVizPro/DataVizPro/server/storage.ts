import {
  users,
  categories,
  menuItems,
  carts,
  orders,
  orderItems,
  type User,
  type InsertUser,
  type Category,
  type InsertCategory,
  type MenuItem,
  type InsertMenuItem,
  type Cart,
  type InsertCart,
  type Order,
  type InsertOrder,
  type OrderItem,
  type InsertOrderItem,
} from "@shared/schema";
import { db } from "./db";
import { eq } from "drizzle-orm";

export interface IStorage {
  // Users
  getUser(id: number): Promise<User | undefined>;
  getUserByTelegramId(telegramId: string): Promise<User | undefined>;
  createUser(user: InsertUser): Promise<User>;

  // Categories
  getCategories(): Promise<Category[]>;
  getCategory(id: number): Promise<Category | undefined>;
  createCategory(category: InsertCategory): Promise<Category>;
  updateCategory(id: number, updates: Partial<Category>): Promise<Category | undefined>;
  deleteCategory(id: number): Promise<boolean>;

  // Menu Items
  getMenuItems(categoryId?: number): Promise<MenuItem[]>;
  getMenuItem(id: number): Promise<MenuItem | undefined>;
  createMenuItem(menuItem: InsertMenuItem): Promise<MenuItem>;
  updateMenuItem(id: number, updates: Partial<MenuItem>): Promise<MenuItem | undefined>;
  deleteMenuItem(id: number): Promise<boolean>;

  // Cart
  getCartItems(userId: number): Promise<(Cart & { menuItem: MenuItem })[]>;
  addToCart(cartItem: InsertCart): Promise<Cart>;
  updateCartItem(id: number, quantity: number): Promise<Cart | undefined>;
  removeFromCart(id: number): Promise<boolean>;
  clearCart(userId: number): Promise<boolean>;

  // Orders
  getOrders(userId: number): Promise<Order[]>;
  getOrder(id: number): Promise<Order | undefined>;
  createOrder(order: InsertOrder): Promise<Order>;
  updateOrderStatus(id: number, status: string): Promise<Order | undefined>;
  getOrderItems(orderId: number): Promise<(OrderItem & { menuItem: MenuItem })[]>;
  createOrderItem(orderItem: InsertOrderItem): Promise<OrderItem>;
}

export class DatabaseStorage implements IStorage {

  constructor() {
    this.seedData();
  }

  private async seedData() {
    try {
      // Check if data already exists
      const existingCategories = await db.select().from(categories).limit(1);
      if (existingCategories.length > 0) {
        return; // Data already seeded
      }

      // Create default user
      await db.insert(users).values({
        telegramId: "123456789",
        firstName: "–ê–ª–µ–∫—Å–µ–π",
        lastName: "–ò–≤–∞–Ω–æ–≤",
        username: "alexivanov",
        phone: "+998901234567",
      });

      // Create categories
      const categoryData = [
        {
          name: "–ü–∏—Ü—Ü–∞",
          description: "–°–≤–µ–∂–∞—è –ø–∏—Ü—Ü–∞ –Ω–∞ —Ç–æ–Ω–∫–æ–º —Ç–µ—Å—Ç–µ",
          image: "üçï",
          isActive: true,
          sortOrder: 1,
        },
        {
          name: "–ë—É—Ä–≥–µ—Ä—ã",
          description: "–°–æ—á–Ω—ã–µ –±—É—Ä–≥–µ—Ä—ã —Å –≥–æ–≤—è–¥–∏–Ω–æ–π –∏ –∫—É—Ä–∏—Ü–µ–π",
          image: "üçî",
          isActive: true,
          sortOrder: 2,
        },
        {
          name: "–£–∑–±–µ–∫—Å–∫–∞—è –∫—É—Ö–Ω—è",
          description: "–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ —É–∑–±–µ–∫—Å–∫–∏–µ –±–ª—é–¥–∞",
          image: "üçõ",
          isActive: true,
          sortOrder: 3,
        },
        {
          name: "–ù–∞–ø–∏—Ç–∫–∏",
          description: "–û—Å–≤–µ–∂–∞—é—â–∏–µ –Ω–∞–ø–∏—Ç–∫–∏ –∏ —Å–æ–∫–∏",
          image: "ü•§",
          isActive: true,
          sortOrder: 4,
        },
      ];

      await db.insert(categories).values(categoryData);

      // Create menu items
      const menuItemData = [
        // –ü–∏—Ü—Ü–∞
        {
          categoryId: 1,
          name: "–ü–∏—Ü—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞",
          description: "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –ø–∏—Ü—Ü–∞ —Å —Ç–æ–º–∞—Ç–Ω—ã–º —Å–æ—É—Å–æ–º, –º–æ—Ü–∞—Ä–µ–ª–ª–æ–π –∏ —Å–≤–µ–∂–∏–º –±–∞–∑–∏–ª–∏–∫–æ–º",
          price: "89000",
          image: "https://images.unsplash.com/photo-1604382355076-af4b0eb60143?w=600&h=400&fit=crop&crop=center",
          isAvailable: true,
          preparationTime: 15,
          ingredients: ["—Ç–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å", "–º–æ—Ü–∞—Ä–µ–ª–ª–∞", "—Å–≤–µ–∂–∏–π –±–∞–∑–∏–ª–∏–∫", "–æ–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ"],
          allergens: ["–≥–ª—é—Ç–µ–Ω", "–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã"],
          tags: ["–≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∞—è", "–ø–æ–ø—É–ª—è—Ä–Ω–∞—è"],
          sortOrder: 1,
        },
        {
          categoryId: 1,
          name: "–ü–∏—Ü—Ü–∞ –ü–µ–ø–ø–µ—Ä–æ–Ω–∏",
          description: "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –ø–∏—Ü—Ü–∞ —Å –ø–µ–ø–ø–µ—Ä–æ–Ω–∏ –∏ —Å—ã—Ä–æ–º –º–æ—Ü–∞—Ä–µ–ª–ª–∞",
          price: "125000",
          image: "https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=600&h=400&fit=crop&crop=center",
          isAvailable: true,
          preparationTime: 15,
          ingredients: ["—Ç–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å", "–º–æ—Ü–∞—Ä–µ–ª–ª–∞", "–ø–µ–ø–ø–µ—Ä–æ–Ω–∏"],
          allergens: ["–≥–ª—é—Ç–µ–Ω", "–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã"],
          tags: ["–ø–æ–ø—É–ª—è—Ä–Ω–∞—è"],
          sortOrder: 2,
        },
        {
          categoryId: 1,
          name: "–ü–∏—Ü—Ü–∞ –ß–µ—Ç—ã—Ä–µ —Å—ã—Ä–∞",
          description: "–ü–∏—Ü—Ü–∞ —Å —á–µ—Ç—ã—Ä—å–º—è –≤–∏–¥–∞–º–∏ —Å—ã—Ä–∞: –º–æ—Ü–∞—Ä–µ–ª–ª–∞, –≥–æ—Ä–≥–æ–Ω–∑–æ–ª–∞, –ø–∞—Ä–º–µ–∑–∞–Ω, —Ä–∏–∫–æ—Ç—Ç–∞",
          price: "145000",
          image: "https://images.unsplash.com/photo-1571407970349-bc81e7e96d47?w=600&h=400&fit=crop&crop=center",
          isAvailable: true,
          preparationTime: 18,
          ingredients: ["–º–æ—Ü–∞—Ä–µ–ª–ª–∞", "–≥–æ—Ä–≥–æ–Ω–∑–æ–ª–∞", "–ø–∞—Ä–º–µ–∑–∞–Ω", "—Ä–∏–∫–æ—Ç—Ç–∞"],
          allergens: ["–≥–ª—é—Ç–µ–Ω", "–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã"],
          tags: ["–≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∞—è", "–ø—Ä–µ–º–∏—É–º"],
          sortOrder: 3,
        },
        // –ë—É—Ä–≥–µ—Ä—ã
        {
          categoryId: 2,
          name: "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –±—É—Ä–≥–µ—Ä",
          description: "–°–æ—á–Ω–∞—è –≥–æ–≤—è–∂—å—è –∫–æ—Ç–ª–µ—Ç–∞ —Å —Å–∞–ª–∞—Ç–æ–º, –ø–æ–º–∏–¥–æ—Ä–æ–º –∏ –º–∞—Ä–∏–Ω–æ–≤–∞–Ω–Ω—ã–º–∏ –æ–≥—É—Ä—Ü–∞–º–∏",
          price: "95000",
          image: "https://images.unsplash.com/photo-1572802419224-296b0aeee0d9?w=600&h=400&fit=crop&crop=center",
          isAvailable: true,
          preparationTime: 12,
          ingredients: ["–≥–æ–≤—è–∂—å—è –∫–æ—Ç–ª–µ—Ç–∞", "—Å–∞–ª–∞—Ç", "–ø–æ–º–∏–¥–æ—Ä", "–º–∞—Ä–∏–Ω–æ–≤–∞–Ω–Ω—ã–µ –æ–≥—É—Ä—Ü—ã", "–±—É–ª–æ—á–∫–∞"],
          allergens: ["–≥–ª—é—Ç–µ–Ω"],
          tags: ["–ø–æ–ø—É–ª—è—Ä–Ω—ã–π"],
          sortOrder: 1,
        },
        {
          categoryId: 2,
          name: "–ß–∏–∫–µ–Ω –±—É—Ä–≥–µ—Ä",
          description: "–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ –Ω–∞ –≥—Ä–∏–ª–µ —Å –∞–≤–æ–∫–∞–¥–æ –∏ –º–∞–π–æ–Ω–µ–∑–æ–º",
          price: "85000",
          image: "https://images.unsplash.com/photo-1594212699903-ec8a3eca50f5?w=600&h=400&fit=crop&crop=center",
          isAvailable: true,
          preparationTime: 12,
          ingredients: ["–∫—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞", "–∞–≤–æ–∫–∞–¥–æ", "–º–∞–π–æ–Ω–µ–∑", "–±—É–ª–æ—á–∫–∞"],
          allergens: ["–≥–ª—é—Ç–µ–Ω"],
          tags: ["–∑–¥–æ—Ä–æ–≤—ã–π"],
          sortOrder: 2,
        },
        {
          categoryId: 2,
          name: "–î–≤–æ–π–Ω–æ–π —á–∏–∑–±—É—Ä–≥–µ—Ä",
          description: "–î–≤–æ–π–Ω–∞—è –≥–æ–≤—è–∂—å—è –∫–æ—Ç–ª–µ—Ç–∞ —Å —Å—ã—Ä–æ–º —á–µ–¥–¥–µ—Ä –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º —Å–æ—É—Å–æ–º",
          price: "135000",
          image: "https://images.unsplash.com/photo-1520072959219-c595dc870360?w=600&h=400&fit=crop&crop=center",
          isAvailable: true,
          preparationTime: 15,
          ingredients: ["–¥–≤–æ–π–Ω–∞—è –≥–æ–≤—è–∂—å—è –∫–æ—Ç–ª–µ—Ç–∞", "—á–µ–¥–¥–µ—Ä", "—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–æ—É—Å", "–ª—É–∫", "–±—É–ª–æ—á–∫–∞"],
          allergens: ["–≥–ª—é—Ç–µ–Ω", "–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã"],
          tags: ["–ø–æ–ø—É–ª—è—Ä–Ω—ã–π", "–æ—Å—Ç—Ä—ã–π"],
          sortOrder: 3,
        },
        // –£–∑–±–µ–∫—Å–∫–∞—è –∫—É—Ö–Ω—è
        {
          categoryId: 3,
          name: "–ü–ª–æ–≤",
          description: "–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π —É–∑–±–µ–∫—Å–∫–∏–π –ø–ª–æ–≤ —Å –±–∞—Ä–∞–Ω–∏–Ω–æ–π, –º–æ—Ä–∫–æ–≤—å—é –∏ —Ä–∏—Å–æ–º",
          price: "65000",
          image: "https://images.unsplash.com/photo-1516684669134-de6f7c473a2a?w=600&h=400&fit=crop&crop=center",
          isAvailable: true,
          preparationTime: 25,
          ingredients: ["–±–∞—Ä–∞–Ω–∏–Ω–∞", "—Ä–∏—Å", "–º–æ—Ä–∫–æ–≤—å", "–ª—É–∫", "—Å–ø–µ—Ü–∏–∏"],
          allergens: [],
          tags: ["—Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π", "–ø–æ–ø—É–ª—è—Ä–Ω—ã–π"],
          sortOrder: 1,
        },
        {
          categoryId: 3,
          name: "–õ–∞–≥–º–∞–Ω",
          description: "–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–∞—è –ª–∞–ø—à–∞ —Å –º—è—Å–æ–º –∏ –æ–≤–æ—â–∞–º–∏ –≤ –∞—Ä–æ–º–∞—Ç–Ω–æ–º –±—É–ª—å–æ–Ω–µ",
          price: "55000",
          image: "https://images.unsplash.com/photo-1569718212165-3a8278d5f624?w=600&h=400&fit=crop&crop=center",
          isAvailable: true,
          preparationTime: 20,
          ingredients: ["–ª–∞–ø—à–∞", "–≥–æ–≤—è–¥–∏–Ω–∞", "–æ–≤–æ—â–∏", "–∑–µ–ª–µ–Ω—å", "—Å–ø–µ—Ü–∏–∏"],
          allergens: ["–≥–ª—é—Ç–µ–Ω"],
          tags: ["—Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π", "—Å—É–ø"],
          sortOrder: 2,
        },
        {
          categoryId: 3,
          name: "–®–∞—à–ª—ã–∫ –∏–∑ –±–∞—Ä–∞–Ω–∏–Ω—ã",
          description: "–°–æ—á–Ω—ã–π —à–∞—à–ª—ã–∫ –∏–∑ –º–∞—Ä–∏–Ω–æ–≤–∞–Ω–Ω–æ–π –±–∞—Ä–∞–Ω–∏–Ω—ã –Ω–∞ –º–∞–Ω–≥–∞–ª–µ",
          price: "98000",
          image: "https://images.unsplash.com/photo-1555939594-58d7cb561ad1?w=600&h=400&fit=crop&crop=center",
          isAvailable: true,
          preparationTime: 18,
          ingredients: ["–±–∞—Ä–∞–Ω–∏–Ω–∞", "–ª—É–∫", "—Å–ø–µ—Ü–∏–∏"],
          allergens: [],
          tags: ["–≥—Ä–∏–ª—å", "–ø–æ–ø—É–ª—è—Ä–Ω—ã–π"],
          sortOrder: 3,
        },
        {
          categoryId: 3,
          name: "–ú–∞–Ω—Ç—ã",
          description: "–ü–∞—Ä–æ–≤—ã–µ –ø–µ–ª—å–º–µ–Ω–∏ —Å –º—è—Å–Ω–æ–π –Ω–∞—á–∏–Ω–∫–æ–π –∏ –ª—É–∫–æ–º",
          price: "45000",
          image: "https://images.unsplash.com/photo-1534422298391-e4f8c172dddb?w=600&h=400&fit=crop&crop=center",
          isAvailable: true,
          preparationTime: 22,
          ingredients: ["–≥–æ–≤—è–¥–∏–Ω–∞", "–±–∞—Ä–∞–Ω–∏–Ω–∞", "–ª—É–∫", "—Ç–µ—Å—Ç–æ"],
          allergens: ["–≥–ª—é—Ç–µ–Ω"],
          tags: ["—Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π", "–Ω–∞ –ø–∞—Ä—É"],
          sortOrder: 4,
        },
        // –ù–∞–ø–∏—Ç–∫–∏
        {
          categoryId: 4,
          name: "–ö–æ–∫–∞-–ö–æ–ª–∞",
          description: "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –æ—Å–≤–µ–∂–∞—é—â–∏–π –Ω–∞–ø–∏—Ç–æ–∫",
          price: "15000",
          image: "https://images.unsplash.com/photo-1581636625402-29b2a704ef13?w=600&h=400&fit=crop&crop=center",
          isAvailable: true,
          preparationTime: 1,
          ingredients: ["–∫–æ–ª–∞"],
          allergens: [],
          tags: [],
          sortOrder: 1,
        },
        {
          categoryId: 4,
          name: "–ó–µ–ª–µ–Ω—ã–π —á–∞–π",
          description: "–ê—Ä–æ–º–∞—Ç–Ω—ã–π –∑–µ–ª–µ–Ω—ã–π —á–∞–π –≤—ã—Å—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞",
          price: "12000",
          image: "https://images.unsplash.com/photo-1556679343-c7306c1976bc?w=600&h=400&fit=crop&crop=center",
          isAvailable: true,
          preparationTime: 3,
          ingredients: ["–∑–µ–ª–µ–Ω—ã–π —á–∞–π"],
          allergens: [],
          tags: ["–∑–¥–æ—Ä–æ–≤—ã–π"],
          sortOrder: 2,
        },
        {
          categoryId: 4,
          name: "–°–≤–µ–∂–µ–≤—ã–∂–∞—Ç—ã–π –∞–ø–µ–ª—å—Å–∏–Ω–æ–≤—ã–π —Å–æ–∫",
          description: "100% –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π –∞–ø–µ–ª—å—Å–∏–Ω–æ–≤—ã–π —Å–æ–∫",
          price: "25000",
          image: "https://images.unsplash.com/photo-1621506289937-a8e4df240d0b?w=600&h=400&fit=crop&crop=center",
          isAvailable: true,
          preparationTime: 2,
          ingredients: ["—Å–≤–µ–∂–∏–µ –∞–ø–µ–ª—å—Å–∏–Ω—ã"],
          allergens: [],
          tags: ["—Å–≤–µ–∂–∏–π", "–≤–∏—Ç–∞–º–∏–Ω—ã"],
          sortOrder: 3,
        },
      ];

      await db.insert(menuItems).values(menuItemData);
    } catch (error) {
      console.error("Error seeding data:", error);
    }
  }

  // User methods
  async getUser(id: number): Promise<User | undefined> {
    const [user] = await db.select().from(users).where(eq(users.id, id));
    return user || undefined;
  }

  async getUserByTelegramId(telegramId: string): Promise<User | undefined> {
    const [user] = await db.select().from(users).where(eq(users.telegramId, telegramId));
    return user || undefined;
  }

  async createUser(insertUser: InsertUser): Promise<User> {
    const [user] = await db
      .insert(users)
      .values(insertUser)
      .returning();
    return user;
  }

  // Category methods
  async getCategories(): Promise<Category[]> {
    return await db.select().from(categories).orderBy(categories.sortOrder);
  }

  async getCategory(id: number): Promise<Category | undefined> {
    const [category] = await db.select().from(categories).where(eq(categories.id, id));
    return category || undefined;
  }

  async createCategory(insertCategory: InsertCategory): Promise<Category> {
    const [category] = await db
      .insert(categories)
      .values(insertCategory)
      .returning();
    return category;
  }

  async updateCategory(id: number, updates: Partial<Category>): Promise<Category | undefined> {
    const [category] = await db
      .update(categories)
      .set(updates)
      .where(eq(categories.id, id))
      .returning();
    return category || undefined;
  }

  async deleteCategory(id: number): Promise<boolean> {
    const result = await db.delete(categories).where(eq(categories.id, id));
    return result.rowCount > 0;
  }

  // Menu Item methods
  async getMenuItems(categoryId?: number): Promise<MenuItem[]> {
    if (categoryId) {
      return await db.select().from(menuItems)
        .where(eq(menuItems.categoryId, categoryId))
        .orderBy(menuItems.sortOrder);
    }
    return await db.select().from(menuItems).orderBy(menuItems.sortOrder);
  }

  async getMenuItem(id: number): Promise<MenuItem | undefined> {
    const [menuItem] = await db.select().from(menuItems).where(eq(menuItems.id, id));
    return menuItem || undefined;
  }

  async createMenuItem(insertMenuItem: InsertMenuItem): Promise<MenuItem> {
    const [menuItem] = await db
      .insert(menuItems)
      .values(insertMenuItem)
      .returning();
    return menuItem;
  }

  async updateMenuItem(id: number, updates: Partial<MenuItem>): Promise<MenuItem | undefined> {
    const [menuItem] = await db
      .update(menuItems)
      .set(updates)
      .where(eq(menuItems.id, id))
      .returning();
    return menuItem || undefined;
  }

  async deleteMenuItem(id: number): Promise<boolean> {
    const result = await db.delete(menuItems).where(eq(menuItems.id, id));
    return result.rowCount > 0;
  }

  // Cart methods
  async getCartItems(userId: number): Promise<(Cart & { menuItem: MenuItem })[]> {
    const cartWithItems = await db
      .select({
        id: carts.id,
        userId: carts.userId,
        itemId: carts.itemId,
        quantity: carts.quantity,
        notes: carts.notes,
        createdAt: carts.createdAt,
        menuItem: {
          id: menuItems.id,
          categoryId: menuItems.categoryId,
          name: menuItems.name,
          description: menuItems.description,
          price: menuItems.price,
          image: menuItems.image,
          isAvailable: menuItems.isAvailable,
          preparationTime: menuItems.preparationTime,
          ingredients: menuItems.ingredients,
          allergens: menuItems.allergens,
          tags: menuItems.tags,
          sortOrder: menuItems.sortOrder,
        }
      })
      .from(carts)
      .innerJoin(menuItems, eq(carts.itemId, menuItems.id))
      .where(eq(carts.userId, userId));

    return cartWithItems as any;
  }

  async addToCart(insertCart: InsertCart): Promise<Cart> {
    // Check if item already exists in cart
    const [existingItem] = await db
      .select()
      .from(carts)
      .where(eq(carts.userId, insertCart.userId))
      .where(eq(carts.itemId, insertCart.itemId));

    if (existingItem) {
      // Update quantity
      const [updatedCart] = await db
        .update(carts)
        .set({ quantity: existingItem.quantity + insertCart.quantity })
        .where(eq(carts.id, existingItem.id))
        .returning();
      return updatedCart;
    } else {
      // Create new cart item
      const [cart] = await db
        .insert(carts)
        .values(insertCart)
        .returning();
      return cart;
    }
  }

  async updateCartItem(id: number, quantity: number): Promise<Cart | undefined> {
    const [cart] = await db
      .update(carts)
      .set({ quantity })
      .where(eq(carts.id, id))
      .returning();
    return cart || undefined;
  }

  async removeFromCart(id: number): Promise<boolean> {
    const result = await db.delete(carts).where(eq(carts.id, id));
    return result.rowCount > 0;
  }

  async clearCart(userId: number): Promise<boolean> {
    const result = await db.delete(carts).where(eq(carts.userId, userId));
    return true; // Always return true as clearing empty cart is successful
  }

  // Order methods
  async getOrders(userId: number): Promise<Order[]> {
    return await db.select().from(orders)
      .where(eq(orders.userId, userId))
      .orderBy(orders.createdAt);
  }

  async getOrder(id: number): Promise<Order | undefined> {
    const [order] = await db.select().from(orders).where(eq(orders.id, id));
    return order || undefined;
  }

  async createOrder(insertOrder: InsertOrder): Promise<Order> {
    const [order] = await db
      .insert(orders)
      .values(insertOrder)
      .returning();
    return order;
  }

  async updateOrderStatus(id: number, status: string): Promise<Order | undefined> {
    const [order] = await db
      .update(orders)
      .set({ status, updatedAt: new Date() })
      .where(eq(orders.id, id))
      .returning();
    return order || undefined;
  }

  async getOrderItems(orderId: number): Promise<(OrderItem & { menuItem: MenuItem })[]> {
    const orderItemsWithMenu = await db
      .select({
        id: orderItems.id,
        orderId: orderItems.orderId,
        itemId: orderItems.itemId,
        quantity: orderItems.quantity,
        price: orderItems.price,
        createdAt: orderItems.createdAt,
        menuItem: {
          id: menuItems.id,
          categoryId: menuItems.categoryId,
          name: menuItems.name,
          description: menuItems.description,
          price: menuItems.price,
          image: menuItems.image,
          isAvailable: menuItems.isAvailable,
          preparationTime: menuItems.preparationTime,
          ingredients: menuItems.ingredients,
          allergens: menuItems.allergens,
          tags: menuItems.tags,
          sortOrder: menuItems.sortOrder,
          createdAt: menuItems.createdAt,
          updatedAt: menuItems.updatedAt,
        }
      })
      .from(orderItems)
      .innerJoin(menuItems, eq(orderItems.itemId, menuItems.id))
      .where(eq(orderItems.orderId, orderId));

    return orderItemsWithMenu;
  }

  async createOrderItem(insertOrderItem: InsertOrderItem): Promise<OrderItem> {
    const [orderItem] = await db
      .insert(orderItems)
      .values(insertOrderItem)
      .returning();
    return orderItem;
  }
}

export const storage = new DatabaseStorage();